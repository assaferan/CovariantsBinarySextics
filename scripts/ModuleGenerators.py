"""
This file contains functions to compute, for each j0, an integer k0 such
that the module of Siegel modular forms of weight (k,j0) is generated over the
ring of scalar-valued forms by elements of weight at most (k0, j0).
"""

from sage.rings.rational_field import QQ
from sage.rings.polynomial.polynomial_ring_constructor import PolynomialRing

def BoundOnModuleGenerators(j):
    A = PolynomialRing(QQ, "t")
    t = A.gen(0)
    B = PolynomialRing(A, "s")
    s = B.gen(0)
    Q = B.quotient(s**(j+1))

    N1 = ( t**2 * (t**29 + t**4) * s**34 + t**2 * (t**25 + t**23 + t**18 + t**17 + t**12 + t**10) * s**32
    + t**2 * (t**25 + t**23 + t**21 + t**20 + t**19 + t**18 + t**17 + t**16 + t**14 + t**12) * s**30
    + t**2 * (t**31 + t**26 + t**24 + t**23 + t**22 + t**21 + t**18 + t**17 + t**16 + t**15 + t**13 + t**10 + t**8 - t**4) * s**28
    + t**2 * (t**30 + t**27 + t**25 + t**24 + t**22 + t**21 + t**20 + t**19 + 2*t**16 + t**14 + t**11 - t**10 - t**4) * s**26
    + t**2 * (t**27 + t**26 + 2*t**24 + 2*t**22 + t**21 + t**20 + t**19 - t**17 - 2*t**12 - t**10 - t**4) * s**24
    + t**2 * (t**30 + 2*t**28 + t**27 + t**26 + t**20 - t**19 - 2*t**18 - 2*t**17 - 2*t**16 - t**14 - t**13 - t**11 - t**10 - t**8 + t**7 - 1) * s**22
    + t**2 * (t**29 + t**28 + t**27 + t**26 - t**25 + t**24 - t**23 + t**22 - t**21 - t**19 - 2*t**18 - 3*t**17 - 3*t**16 - t**15 - 2*t**14 - t**13
              - 3*t**12 - t**11 - 2*t**10 - t**8 + t**4) * s**20
    + t**2 * (2*t**28 + t**26 - t**24 - t**22 - t**21 - t**20 - 2*t**19 - 2*t**18 - 2*t**17 - 4*t**16 - 2*t**15 - 3*t**14 - 2*t**13 - t**12 - 2*t**11
              - t**10 - t**9 - t**8 + t**4 + t**3) * s**18
    + t**2 * (t**29 + t**28 - t**24 - t**23 - t**22 - 2*t**21 - t**20 - 2*t**19 - 3*t**18 - 2*t**17 - 4*t**16 - 2*t**15 - 2*t**14 - 2*t**13 - t**12
              - t**11 - t**10 - t**8 + t**6 + 2*t**4) * s**16
    + t**2 * (t**28 - t**24 - 2*t**22 - t**21 - 3*t**20 - t**19 - 2*t**18 - t**17 - 3*t**16 - 3*t**15 - 2*t**14 - t**13 - t**11 + t**10 - t**9 + t**8
              - t**7 + t**6 + t**5 + t**4 + t**3) * s**14
    + t**2 * (-t**28 - t**26 + t**25 - t**24 - t**22 - t**21 - t**20 - t**19 - 2*t**15 - t**14 - t**13 + t**5 + t**4 + t**2 + 1) * s**12
    + t**2 * (-t**28 - t**22 - 2*t**20 - t**15 + t**13 + t**12 + t**11 + 2*t**10 + 2*t**8 + t**6 + t**5) * s**10
    + t**2 * (-t**28 - t**22 + t**21 + t**18 + 2*t**16 + t**13 + t**12 + t**11 + t**10 + t**8 + t**7 + t**5 + t**2) * s**8
    + t**2 * (-t**28 + t**24 + t**22 + t**19 + t**17 + t**16 + t**15 + t**14 + t**11 + t**10 + t**9 + t**8 + t**6 + t ) * s**6
    + t**2 * (t**20 + t**18 + t**16 + t**15 + t**14 + t**13 + t**12 + t**11 + t**9 + t**7) * s**4
    + t**2 * (t**22 + t**20 + t**15 + t**14 + t**9 + t**7) * s**2
    + t**2 * (t**28 + t**3))

    N0 = (t**35 + 1 + (-t**33 + t**32 + t**29 - t**28 + t**27 - t**26 + t**23 + t**21 - t**20 + t**18 + 2*t**16 + t**14 + t**10) * s**2
    + (t**23 + t**21 + t**19 + t**17 + t**16 + t**15 + t**14 + t**12 + t**10 + t**8) * s**4
    + (-t**35 + t**23 + t**21 + t**19 + t**18 + t**17 + t**16 + t**15 + t**14 + t**13 + t**12 + t**11 + t**10 + t**8 + t**6 - 1) * s**6
    + (-t**35 + t**33 - t**32 - t**29 + t**28 - t**27 + t**26 - t**21 + t**20 + t**19 + 2*t**17 - t**16 + 2*t**15 + t**13 + 2*t**12 + t**11
       + t**10 + t**9 + t**8 + t**4 - 1) * s**8
    + (-t**35 + t**33 - t**32 - 2*t**29 + t**28 - 2*t**27 - t**24 - t**23 - t**21 + 2*t**20 + t**19 + 2*t**17 - t**16 + 2*t**15 + t**14
       + t**13 + t**12 + t**11 + t**9 + t**6 - 1) * s**10
    + (-t**35 + t**33 - t**32 - t**29 + t**28 - t**27 + t**26 - 3*t**23 - 3*t**21 + t**20 - t**19 - 2*t**18 - 3*t**16 - t**14 + t**13
       + t**12 + 2*t**11 - t**10 + 2*t**9 + t**7 + t**6 + t**4 - 1) * s**12
    + (t**35 + t**33 - t**29 - 2*t**27 - t**25 - t**24 - 4*t**23 - t**22 - 3*t**21 - 2*t**19 - t**18 - t**17 - 2*t**16 - t**14 + t**13
       - t**12 + t**11 - t**10 + t**9 - t**8 + t**7 + 1) * s**14
    + (t**35 + t**32 + t**31 + t**29 - t**28 - 2*t**25 - 4*t**23 - t**22 - 3*t**21 - 3*t**20 - 4*t**19 - 2*t**18 - 3*t**17 - t**16 - 2*t**15
       - 2*t**14 + t**13 - 2*t**12 + t**11 - t**10 + t**9 + t**7 + 1) * s**16
    + (2*t**35 + 2*t**32 + t**30 + t**29 - t**28 + t**27 - 2*t**26 - t**25 - t**24 - 2*t**23 - 2*t**22 - 2*t**21 - 4*t**20 - 3*t**19 - 2*t**18
    - 4*t**17 - 3*t**15 - t**13 - 2*t**12 - t**11 + t**7 - t**6 + t**5 - t**4 + 2) * s**18
    + (t**35 - t**33 + 2*t**32 + t**31 + t**30 + 3*t**29 - t**28 + 2*t**27 - t**26 - t**25 - 2*t**22 - 5*t**20 - 4*t**19 - 2*t**18 - 5*t**17
       + t**16 - 3*t**15 - t**14 - t**13 - 2*t**12 - t**11 + t**10 - t**9 + t**8 + t**7 + t**5 - t**4 + 1) * s**20
    + (t**35 + t**34 + 2*t**32 + t**31 + t**30 + 2*t**29 - t**28 + 2*t**27 - 2*t**26 - t**24 + t**23 - 2*t**22 - t**21 - 4*t**20 - 2*t**19
       - t**18 - 2*t**17 + 2*t**16 - 2*t**15 + t**14 - 2*t**13 - t**11 + t**10 + t**8 - t**6 - t**4 + 1) * s**22
    + (-t**35 - t**33 + t**31 + t**30 + 2*t**29 + t**28 + 2*t**27 + t**25 + 4*t**23 + 2*t**21 - t**20 - t**19 - t**18 - 2*t**17 - t**15
       - 2*t**13 - 2*t**11 + t**10 - t**9 + t**8 + t**6 + t**5 - 1) * s**24
    + (-t**35 + t**34 + t**31 + t**29 + t**28 + t**27 + t**26 + t**25 + 3*t**23 - t**22 + t**21 - t**13 + 2*t**12 - t**11 + t**10
       + t**8 - 1) * s**26
    + (-t**35 - t**32 + 2*t**28 + t**26 + 2*t**25 + 3*t**23 + t**22 + t**21 + 3*t**20 + t**19 + t**18 + t**17 - 2*t**16 + t**15 - t**13 + t**12
       - t**11 - t**8 + t**6 + t**4 - 1) * s**28
    + (-t**35 - t**32 + t**28 + 2*t**26 + t**25 + t**24 + t**23 + t**22 + t**21 + 2*t**20 + t**19 + t**17 - t**16 + t**15
       - t**14 + t**12 + t**4 - 1) * s**30
    + (-t**34 - t**32 - t**31 - t**29 + t**28 + t**26 + t**25 + t**24 + 3*t**22 + t**21 + 3*t**20 + 2*t**19 + t**17 - 2*t**16 - t**12 - 2*t**10
       - t**8 + t**6 + t**4) * s**32
    + (t**26 + t**24 - t**23 - t**14 + t**13 + t**11) * s**34
    + (t**35 - t**34 - t**31 - t**29 + t**24 - t**23 + 2*t**22 + t**21 + 2*t**19 + t**17 - t**15 - 2*t**12 - t**10 - t**9 - t**7 + t**3 + 1) * s**36)

    den = Q((1 - s**6) * (1 - s**8) * (1 - s**10) * (1 - s**12))
    x = 1 - den
    invden = Q(1)
    while x != 0:
        invden += x
        x *= (1 - den)

    S0 = Q(N0) * invden
    S1 = Q(N1) * invden

    S0 = S0.lift()
    if S0.degree() < j:
        S0 = A(1)
    else:
        S0 = S0.coefficients(sparse = False)[j]
    S1 = S1.lift()
    if S1.degree() < j:
        S1 = A(1)
    else:
        S1 = S1.coefficients(sparse = False)[j]

    L0 = S0.coefficients(sparse = False)
    L1 = S1.coefficients(sparse = False)
    L = [[0 for i in range(len(L0))],
         [0 for i in range(len(L0))],
         [0 for i in range(len(L1))],
         [0 for i in range(len(L1))]]
    for i in range(len(L0)):
        if i % 2 == 0:
            L[0][i] = L0[i]
        else:
            L[1][i] = L0[i]
    for i in range(len(L1)):
        if i % 2 == 0:
            L[2][i] = L1[i]
        else:
            L[3][i] = L1[i]

    for m in range(4):
        #keep only positive coefficients (before the relations)
        k0 = 0
        while k0 < len(L[m]) and (L[m][k0] >= 0):
            k0 += 1
        L[m] = L[m][0:k0]

    #get maximum k0
    k0 = 0
    for m in range(4):
        for i in range(len(L[m])):
            if L[m][i] > 0:
                k0 = max(k0, i)
    return k0
